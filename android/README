Cinder on Android
=================

This is a work-in-progress port of Cinder to Android.

When linked as an activity it uses the NDK Native Activity code, which
restricts it to running on Android versions 2.3 (Gingerbread) and upwards. This
restriction does not apply when linked as a static library called through JNI.

Tested to build on Windows (cygwin), OSX and Linux.


Quickstart
==========

* Install prerequisites:

  - Android SDK and Android NDK R5c or later
  - bash, curl, unzip, tar and bzip2 command-line tools (required by setup-android)

* Run setup-android

  % cd cinder/android
  % . setup-android

* Configure build settings by editing jni/cinder/Configure.mk (optional)
  
  USE_FREEIMAGE : use FreeImage image library (wide format compatibility but large)
  USE_STBIMAGE  : use the stb_image image library (small JPEG/PNG/GIF reader)
  USE_GLES2     : select OpenGL ES2 - if disabled then OpenGL ES1.5 is used instead

* Build the library.  Tip: use -j <num cores> to enable multi-threaded build.

  % ndk-build -j 4

* Build one of the sample programs (AndroidTest, FBOBasic, iPhoneAccelerometer,
  MultiTouchBasic, AndroidTestES2 or shaderTestES2)

  % cd cinder/samples/<SAMPLE>/android
  % . setup-android
  % ndk-build && ant debug && adb install -r bin/<SAMPLE-APK>

NB: The ES2 samples will only build against an ES2 build of Cinder (and vice versa)


Linking against Cinder
======================

The android/setup-android script will suggest settings for linking against
prebuilt static libraries, or you can set NDK_MODULE_PATH to
$CINDER_PATH/android/jni to build a new copy of Cinder against each importing
project.

Each sample has a setup-android script fragment that will automatically set
NDK_MODULE_PATH if it hasn't already been defined.

See $NDK/docs/IMPORT-MODULE.html for more details of how to use
NDK_MODULE_PATH.


Status
======

* console() output goes to the Android debug log
* loadResource opens files embedded from the project "assets" folder
* FreeImage image source, tested to work with PNG/JPEG/BMP files so far
* stb_image image source, a smaller image backend compatible with PNG/JPEG/GIF
* OpenGL ES2 supported at compile time with a restricted subset of gl methods


TODO
====

* Android save/restore state callbacks
* Text support (Font/TextureFont, to be implemented with Freetype/Harfbuzz)
* Audio support (using OpenSL ES)
* URL implementation (currently stubbed out)
* Camera capture (may require JNI)
* Better filesystem support


safetydank 14/8/11

